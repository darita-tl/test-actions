name: Conditional Matrix Workflow

on:
  workflow_dispatch:
    inputs:
      release-stories:
        description: "Release stories?"
        required: false
        type: boolean
        default: false
      release-contracts:
        description: "Release contracts?"
        required: false
        type: boolean
        default: false
      increase:
        description: "Release version"
        required: true
        type: choice
        options:
          - skip
          - patch
          - minor
          - major
        default: skip
  push:
    branches:
      - main

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      appMatrix: ${{ steps.set-matrix.outputs.appMatrix }}
      packageMatrix: ${{ steps.set-matrix.outputs.packageMatrix }}
    steps:
      - name: Build matrix JSON
        id: set-matrix
        uses: actions/github-script@v6
        with:
          script: |
            const allTasks = {
              stories: {
                name: "cms-stories-api",
                type: "api"
              },
              contracts: {
                name: "cms-api-contracts",
                type: "npm_package"
              },
            };
            const eventName = process.env.GITHUB_EVENT_NAME;
            let selectedTasks = [];
            
            if (eventName === 'push') {
              // On push to main: include everything
              selectedTasks = Object.values(allTasks);
            } else {
              // On workflow_dispatch: include only checked inputs
              const inputs = github.context.inputs;
              console.log('Inputs:', github.context);
              if (inputs['release-stories']) selectedTasks.push(allTasks.stories);
              if (inputs['release-contracts']) selectedTasks.push(allTasks.contracts);
            }
            
            const appMatrix = selectedTasks.filter(task => task.type === 'api' );
            const packageMatrix = selectedTasks.filter(task => task.type === 'npm_package' );
            core.setOutput('appMatrix', JSON.stringify({ include: appMatrix }));
            core.setOutput('packageMatrix', JSON.stringify({ include: packageMatrix }));

  app-matrix:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.appMatrix) }}
    steps:
      - name: Execute ${{ matrix.name }} (${{ matrix.type }})
        if: ${{ matrix.name }}
        run: |
          echo "▶️ Running ${{ matrix.name }} (${{ matrix.type }})"
          case "${{ matrix.name }}" in
            cms-stories-api)  echo "→ Releasing stories (${{ matrix.type }}) with ${{github.event.inputs.increase}} version";;
            cms-api-contracts)  echo "→ Releasing contracts (${{ matrix.type }}) with ${{github.event.inputs.increase}} version";;
          esac
  
  package-matrix:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.packageMatrix) }}
    steps:
      - name: Execute ${{ matrix.name }} (${{ matrix.type }})
        if: ${{ matrix.name }}
        run: |
          echo "▶️ Running ${{ matrix.name }} (${{ matrix.type }})"
          case "${{ matrix.name }}" in
            cms-stories-api)  echo "→ Releasing stories (${{ matrix.type }}) with ${{github.event.inputs.increase}} version";;
            cms-api-contracts)  echo "→ Releasing contracts (${{ matrix.type }}) with ${{github.event.inputs.increase}} version";;
          esac